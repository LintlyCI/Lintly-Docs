{
    "docs": [
        {
            "location": "/", 
            "text": "Lintly\n\n\nWelcome to the Lintly documentation!\n\n\nIf you need clarification on any documentation then please\n\ncreate an issue here\n.\n\n\nSupported Languages\n\n\nLintly currently supports \nPython 2.7 and 3.6\n. There are plans to add support for more languages in\nthe future. If you would like to request a language or linter then please create a \nfeature request here\n.\n\n\nAuthentication and Permissions\n\n\nLintly uses GitHub OAuth tokens to authenticate users. These tokens will also be used to pull data\nfrom GitHub when the user is browsing around on Lintly. Therefore, if a user does not have access to\nyour repo in GitHub then they will not have access in Lintly.\n\n\nThis extends to Admin users as well. Admins of a repo in GitHub will be admins in Lintly. Admins can\nperform the following actions in Lintly:\n\n\n\n\nImport repos from GitHub into Lintly\n\n\nRemove repos from Lintly\n\n\nUpdate settings\n\n\n\n\nGitHub API tokens\n\n\nLintly uses GitHub API tokens to interact with GitHub. The following tokens are used in Lintly:\n\n\nThe currently logged in user\n\n\n\n\nAll API requests that occur while logged into Lintly.com. This includes determining repository permissions,\nimporting projects, and viewing file contents.\n\n\n\n\nThe project's \nauthorized user\n\n\n\n\nAll API requests that occur during automatic builds (except for PR comments/reviews) \nunless a custom\nbot is specified\n.\n\n\n\n\nlintly-bot\n\n\n\n\nCommenting or creating a pull request review during automatic builds on public repositories \nunless\na custom bot is specified\n.\n\n\n\n\nCustom bot\n\n\n\n\nAll API requests\n\n\n\n\nProject authorized users\n\n\nThe authorized user of a project is the user whose API tokens will be used during automatic builds.\nThis is initially set as the user who imported the project into Lintly.\n\n\nNote:\n  Some organizations may have a bot account whose API tokens should be used during automatic\nbuilds and when commenting on pull requests. Soon there will be a way to specify who your project's\nauthorized user is.\n\n\nBuild Configuration\n\n\nBuilds can be configured by adding a file named \nlintly.yml\n to root of your project.\n\n\nDefault configuration\n\n\nLintly uses the following default configuration for builds:\n\n\nlintly:\n  bot: null\n\nlanguages:\n  python:\n    version: 2\n\n\n\n\nPython 3 configuration\n\n\nAdd the following configuration to your \nlintly.yml\n file to make Lintly lint your project using\nPython 3.6.\n\n\nlanguages:\n  python:\n    version: 3\n\n\n\n\nCustom bot accounts\n\n\nYou can use the API tokens from your own bot accounts to retrieve PR diffs, comment on PRs, create PR\nreviews, and create \ncommit statuses\n. This will save\nthe API tokens on your personal account from being used to much and potentially being rate-limited by\nGitHub.\n\n\nBefore adding a custom bot, \nensure that the bot account has collaborator access to your repository\n\nin GitHub. This is a security feature to ensure the bot account you're using really does have the\nappropriate access to the repo.\n\n\nTo add a custom bot to Lintly, first login into Lintly with the bot account. You need to do this so\nthat Lintly will have access to the bot's API token. Next, add the following YAML to your \nlintly.yml\n\nfile (substituting \n{bot_username}\n with the GitHub username of your bot):\n\n\nlintly:\n  bot: {bot_username}\n\n\n\n\nWith custom bot accounts you will \nnow have commit statuses and pull request reviews in your pull\nrequests\n. Commit statuses only work with custom bots, as the default lintly-bot account likely won't\nhave collaborator access to create them.\n\n\nLinter Configuration\n\n\nLintly uses the Python tool \nflake8\n under the hood. Therefore,\nflake8 configuration files will work with Lintly as well. Changing the configuration will affect which\nviolations count against your code quality score. To change the configuration, add either a \n.flake8\n,\n\nsetup.cfg\n, or \ntox.ini\n file to the root directory of your repo. \nRead more about flake8 configuration here\n.\n\n\nDefault configuration\n\n\nIf your project does not have a flake8 configuration file then Lintly will add one for you. The following\nis the default flake8 config file that Lintly provides:\n\n\n[flake8]\n# Be a little more relaxed than the PEP8 79 character limit\nmax-line-length = 100\n\n# McCabe complexity max\nmax-complexity = 10\n\n# Only check Python files\nfilename = *.py\n\n# Lintly requires the default format\nformat = default\n\n# Don't count against Django's generated migration files\nexclude =\n    */migrations/*\n\n\n\n\nPull Requests\n\n\nWhen a pull request is opened on GitHub, Lintly will get notified via a web hook and begin linting the changes. If there are any violations found then Lintly will comment on the pull request. There are two ways that Lintly can comment on pull requests:\n\n\n\n\nPull request reviews\n (comment on individual lines)\n\n\nA single comment with all violations\n\n\n\n\nLintly's GitHub bot account (\nlintly-bot\n) will first attempt to create a pull request review. With a pull request review, the pull request will receive a comment on each line that has a code quality violation. If \nlintly-bot\n does not have permission to create a pull request review on your repo then it will fall back to creating one pull request comment that contains all violations.\n\n\nEnabling Pull Request Reviews\n\n\nDue to \na restriction in the GitHub API\n, \nlintly-bot\n must be invited to be a collaborator on your repository before it can create a pull request review. Follow these steps to invite \nlintly-bot\n to be a collaborator:\n\n\n\n\nGo to your repo in GitHub\n\n\nClick Settings\n\n\nClick Collaborators\n\n\nEnter the name \nlintly-bot\n into the search bar\n\n\nClick Add Collaborator\n\n\n\n\nThis will send an invitation to \nlintly-bot\n. These invitations must be accepted manually, so please allow a few hours for the invitation to be accepted.\n\n\nNotifications\n\n\nLintly can be configured to send notifications when a pull request reduces code quality by a certain percentage.\n\n\nSlack Notifications\n\n\nTo setup Slack notifications you will first need to create a new Integration in Slack. To do that,\ngo to your Slack installation at \nhttps://{yourteam}.slack.com\n. Next...\n\n\n\n\nClick Apps \n Integrations.\n\n\nIn the top right corner of the page, click Manage \n Make a Custom Integration \n Incoming WebHooks.\n\n\nChoose the channel you would like notifications posted to and click \"Add Incoming WebHooks Integration\".\n\n\nOn the next page, copy the Webhook URL. This is what you will add to Lintly.\n\n\n\n\nNow go back over to lintly.com. From here, follow these steps:\n\n\n\n\nGo to the project you would like to configure Slack notifications for.\n\n\nClick Settings\n\n\nUnder Notifications, click Slack\n\n\nEnter your webhook URL, check the Enabled checkbox, and change the channel to something appropriate (e.g., \n#general\n or \n#code-quality\n).\n\n\nClick Save Settings\n\n\n\n\nEmail Notifications\n\n\nTo setup Email notifications, navigate to the project in Lintly and...\n\n\n\n\nClick Settings\n\n\nUnder Notifications, click Email\n\n\nEnter the email addresses you would like to receive emails (separated by a comma) and check the Enabled checkbox.\n\n\nClick Save Settings\n\n\n\n\nProject Badges\n\n\nProject badges are a handy way to show the current code quality percentage of your app. This is what\nthey look like:\n\n\n\n\nTo create your badge, go to your project in Lintly. In the top-right corner is your project badge.\nClicking on that will take you to the project badges page. From here, copy the Markdown, HTML, or RST\nand paste it in your README file.\n\n\nFrequently Asked Questions\n\n\nHow do I add new users to Lintly?\n\n\nLintly uses GitHub APIs to authorize users, so there is no need to explicitly add a user in Lintly.\nIf the user has read access to the repo in GitHub then they will have access in Lintly.\n\n\nHow is the code quality score calculated?\n\n\nCode Quality = Lines of Code with Issues / Total Lines Of Code * 100.0", 
            "title": "Home"
        }, 
        {
            "location": "/#lintly", 
            "text": "Welcome to the Lintly documentation!  If you need clarification on any documentation then please create an issue here .", 
            "title": "Lintly"
        }, 
        {
            "location": "/#supported-languages", 
            "text": "Lintly currently supports  Python 2.7 and 3.6 . There are plans to add support for more languages in\nthe future. If you would like to request a language or linter then please create a  feature request here .", 
            "title": "Supported Languages"
        }, 
        {
            "location": "/#authentication-and-permissions", 
            "text": "Lintly uses GitHub OAuth tokens to authenticate users. These tokens will also be used to pull data\nfrom GitHub when the user is browsing around on Lintly. Therefore, if a user does not have access to\nyour repo in GitHub then they will not have access in Lintly.  This extends to Admin users as well. Admins of a repo in GitHub will be admins in Lintly. Admins can\nperform the following actions in Lintly:   Import repos from GitHub into Lintly  Remove repos from Lintly  Update settings", 
            "title": "Authentication and Permissions"
        }, 
        {
            "location": "/#github-api-tokens", 
            "text": "Lintly uses GitHub API tokens to interact with GitHub. The following tokens are used in Lintly:  The currently logged in user   All API requests that occur while logged into Lintly.com. This includes determining repository permissions,\nimporting projects, and viewing file contents.   The project's  authorized user   All API requests that occur during automatic builds (except for PR comments/reviews)  unless a custom\nbot is specified .   lintly-bot   Commenting or creating a pull request review during automatic builds on public repositories  unless\na custom bot is specified .   Custom bot   All API requests", 
            "title": "GitHub API tokens"
        }, 
        {
            "location": "/#project-authorized-users", 
            "text": "The authorized user of a project is the user whose API tokens will be used during automatic builds.\nThis is initially set as the user who imported the project into Lintly.  Note:   Some organizations may have a bot account whose API tokens should be used during automatic\nbuilds and when commenting on pull requests. Soon there will be a way to specify who your project's\nauthorized user is.", 
            "title": "Project authorized users"
        }, 
        {
            "location": "/#build-configuration", 
            "text": "Builds can be configured by adding a file named  lintly.yml  to root of your project.", 
            "title": "Build Configuration"
        }, 
        {
            "location": "/#default-configuration", 
            "text": "Lintly uses the following default configuration for builds:  lintly:\n  bot: null\n\nlanguages:\n  python:\n    version: 2", 
            "title": "Default configuration"
        }, 
        {
            "location": "/#python-3-configuration", 
            "text": "Add the following configuration to your  lintly.yml  file to make Lintly lint your project using\nPython 3.6.  languages:\n  python:\n    version: 3", 
            "title": "Python 3 configuration"
        }, 
        {
            "location": "/#custom-bot-accounts", 
            "text": "You can use the API tokens from your own bot accounts to retrieve PR diffs, comment on PRs, create PR\nreviews, and create  commit statuses . This will save\nthe API tokens on your personal account from being used to much and potentially being rate-limited by\nGitHub.  Before adding a custom bot,  ensure that the bot account has collaborator access to your repository \nin GitHub. This is a security feature to ensure the bot account you're using really does have the\nappropriate access to the repo.  To add a custom bot to Lintly, first login into Lintly with the bot account. You need to do this so\nthat Lintly will have access to the bot's API token. Next, add the following YAML to your  lintly.yml \nfile (substituting  {bot_username}  with the GitHub username of your bot):  lintly:\n  bot: {bot_username}  With custom bot accounts you will  now have commit statuses and pull request reviews in your pull\nrequests . Commit statuses only work with custom bots, as the default lintly-bot account likely won't\nhave collaborator access to create them.", 
            "title": "Custom bot accounts"
        }, 
        {
            "location": "/#linter-configuration", 
            "text": "Lintly uses the Python tool  flake8  under the hood. Therefore,\nflake8 configuration files will work with Lintly as well. Changing the configuration will affect which\nviolations count against your code quality score. To change the configuration, add either a  .flake8 , setup.cfg , or  tox.ini  file to the root directory of your repo.  Read more about flake8 configuration here .", 
            "title": "Linter Configuration"
        }, 
        {
            "location": "/#default-configuration_1", 
            "text": "If your project does not have a flake8 configuration file then Lintly will add one for you. The following\nis the default flake8 config file that Lintly provides:  [flake8]\n# Be a little more relaxed than the PEP8 79 character limit\nmax-line-length = 100\n\n# McCabe complexity max\nmax-complexity = 10\n\n# Only check Python files\nfilename = *.py\n\n# Lintly requires the default format\nformat = default\n\n# Don't count against Django's generated migration files\nexclude =\n    */migrations/*", 
            "title": "Default configuration"
        }, 
        {
            "location": "/#pull-requests", 
            "text": "When a pull request is opened on GitHub, Lintly will get notified via a web hook and begin linting the changes. If there are any violations found then Lintly will comment on the pull request. There are two ways that Lintly can comment on pull requests:   Pull request reviews  (comment on individual lines)  A single comment with all violations   Lintly's GitHub bot account ( lintly-bot ) will first attempt to create a pull request review. With a pull request review, the pull request will receive a comment on each line that has a code quality violation. If  lintly-bot  does not have permission to create a pull request review on your repo then it will fall back to creating one pull request comment that contains all violations.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/#enabling-pull-request-reviews", 
            "text": "Due to  a restriction in the GitHub API ,  lintly-bot  must be invited to be a collaborator on your repository before it can create a pull request review. Follow these steps to invite  lintly-bot  to be a collaborator:   Go to your repo in GitHub  Click Settings  Click Collaborators  Enter the name  lintly-bot  into the search bar  Click Add Collaborator   This will send an invitation to  lintly-bot . These invitations must be accepted manually, so please allow a few hours for the invitation to be accepted.", 
            "title": "Enabling Pull Request Reviews"
        }, 
        {
            "location": "/#notifications", 
            "text": "Lintly can be configured to send notifications when a pull request reduces code quality by a certain percentage.", 
            "title": "Notifications"
        }, 
        {
            "location": "/#slack-notifications", 
            "text": "To setup Slack notifications you will first need to create a new Integration in Slack. To do that,\ngo to your Slack installation at  https://{yourteam}.slack.com . Next...   Click Apps   Integrations.  In the top right corner of the page, click Manage   Make a Custom Integration   Incoming WebHooks.  Choose the channel you would like notifications posted to and click \"Add Incoming WebHooks Integration\".  On the next page, copy the Webhook URL. This is what you will add to Lintly.   Now go back over to lintly.com. From here, follow these steps:   Go to the project you would like to configure Slack notifications for.  Click Settings  Under Notifications, click Slack  Enter your webhook URL, check the Enabled checkbox, and change the channel to something appropriate (e.g.,  #general  or  #code-quality ).  Click Save Settings", 
            "title": "Slack Notifications"
        }, 
        {
            "location": "/#email-notifications", 
            "text": "To setup Email notifications, navigate to the project in Lintly and...   Click Settings  Under Notifications, click Email  Enter the email addresses you would like to receive emails (separated by a comma) and check the Enabled checkbox.  Click Save Settings", 
            "title": "Email Notifications"
        }, 
        {
            "location": "/#project-badges", 
            "text": "Project badges are a handy way to show the current code quality percentage of your app. This is what\nthey look like:   To create your badge, go to your project in Lintly. In the top-right corner is your project badge.\nClicking on that will take you to the project badges page. From here, copy the Markdown, HTML, or RST\nand paste it in your README file.", 
            "title": "Project Badges"
        }, 
        {
            "location": "/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/#how-do-i-add-new-users-to-lintly", 
            "text": "Lintly uses GitHub APIs to authorize users, so there is no need to explicitly add a user in Lintly.\nIf the user has read access to the repo in GitHub then they will have access in Lintly.", 
            "title": "How do I add new users to Lintly?"
        }, 
        {
            "location": "/#how-is-the-code-quality-score-calculated", 
            "text": "Code Quality = Lines of Code with Issues / Total Lines Of Code * 100.0", 
            "title": "How is the code quality score calculated?"
        }
    ]
}